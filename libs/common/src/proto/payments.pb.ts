// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: libs/common/src/proto/payments.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "payments";

/** Message type for Amount */
export interface AmountRequest {
  currencyCode: string;
  value: number;
}

/** Message type for Item */
export interface ItemRequest {
  name: string;
  quantity: number;
  unitAmount: AmountRequest | undefined;
  imageUrl: string;
  url: string;
}

/** Message type for BillingAddress */
export interface BillingAddressRequest {
  addressLine1: string;
  addressLine2: string;
  /** City */
  adminArea2: string;
  /** State */
  adminArea1: string;
  postalCode: string;
  countryCode: string;
}

/** Message type for Card */
export interface CardRequest {
  name: string;
  number: string;
  securityCode: string;
  expiry: string;
  billingAddress: BillingAddressRequest | undefined;
}

/** Message type for ExperienceContext */
export interface ExperienceContextRequest {
  returnUrl: string;
  cancelUrl: string;
  brandName: string;
}

/** Message type for PaymentCreateRequest */
export interface PaymentCreateRequest {
  orderId: number;
  userId: number;
  method: string;
  amount: number;
  currency: string;
  idempotencyKey: string;
  items: ItemRequest[];
  experienceContext: ExperienceContextRequest | undefined;
  paymentSource: CardRequest | undefined;
}

export interface PaymentCreateResponse {
  id: number;
  uuid: string;
  orderId: number;
  payerId: number;
  provider: string;
  status: string;
  amount: number;
  currency: string;
  initiatedAt: string;
  completedAt: string;
  walletUpdated: boolean;
  ledgerUpdated: boolean;
  createdAt: string;
  updatedAt: string;
  deletedAt: string;
}

export const PAYMENTS_PACKAGE_NAME = "payments";

/** PaymentsService definition */

export interface PaymentsServiceClient {
  createPayment(request: PaymentCreateRequest): Observable<PaymentCreateResponse>;
}

/** PaymentsService definition */

export interface PaymentsServiceController {
  createPayment(
    request: PaymentCreateRequest,
  ): Promise<PaymentCreateResponse> | Observable<PaymentCreateResponse> | PaymentCreateResponse;
}

export function PaymentsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createPayment"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PaymentsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PaymentsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PAYMENTS_SERVICE_NAME = "PaymentsService";
